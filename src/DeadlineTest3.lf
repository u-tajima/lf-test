target C {
    timeout: 60 sec,
};

preamble{=
    #include <time.h>
    #include "platform.h"
    #include <stdio.h>
    #include <stdlib.h>
    static inline long get_time_ns() {
        struct timespec ts;
        clock_gettime(CLOCK_REALTIME, &ts);
        return ts.tv_sec * 1000000000L + ts.tv_nsec;
    }
=}

reactor Source(period: time = 5 msec) {  // 少しタイトな周期推奨
    output y: int64_t
    
    timer t(0, period)
    state count: int = 0
    state last_send_time: int64_t = -1

    reaction(t) -> y {=
        long logical_fire_ns = lf_time_logical(); // logical time in ns (API依存、または自分で定義)
        long reaction_start_ns = get_time_ns();

        long scheduler_latency_ns = reaction_start_ns - logical_fire_ns;
        printf("Scheduler latency: %ld ns\n", scheduler_latency_ns);

        // CPU負荷をかけるダミー計算
        volatile double x_dummy = 0;
        for (int i = 0; i < 50000; i++) {  // ← 回数は調整可能
            x_dummy += i * 0.0001;
        }

        long send_time_ns = get_time_ns();

        // 周期ジッタ出力
        if (self->last_send_time >= 0) {
            long interval_ns = send_time_ns - self->last_send_time;
            printf("[%ld.%09ld] Source sends: %d at %ld ns (interval: %ld ns)\n", 
                send_time_ns / 1000000000L, send_time_ns % 1000000000L, self->count, send_time_ns, interval_ns);
        } else {
            printf("[%ld.%09ld] Source sends: %d at %ld ns (first send)\n", 
                send_time_ns / 1000000000L, send_time_ns % 1000000000L, self->count, send_time_ns);
        }

        self->last_send_time = send_time_ns;

        lf_set(y, send_time_ns);
        (self->count)++;
    =}

}

reactor Destination(timeout: time = 500 usec, enable_heavy_loop: int = 0) {
    input x: int64_t
    state count: int = 0
    state deadline_miss_count: int = 0
    state total_received: int = 0
    state max_count: int = 10000

    reaction(x) {=
        (self->count)++;
        (self->total_received)++;

        long recv_time_ns = get_time_ns();
        long send_time_ns = x->value;
        long error_ns = recv_time_ns - send_time_ns;

        // 必要ならここにも負荷を入れる（enable_heavy_loop=1なら実行）
        if (self->enable_heavy_loop) {
            volatile double x_dummy = 0;
            for (int i = 0; i < 100000; i++) {  
                x_dummy += i * 0.0001;
            }
        }

        // Destination latency出力
        printf("[%ld.%09ld] Destination receives msg, send_time: %ld ns, recv_time: %ld ns, error: %ld ns\n", 
            recv_time_ns / 1000000000L, recv_time_ns % 1000000000L,
            send_time_ns, recv_time_ns, error_ns);

        if (self->total_received >= self->max_count) {
            printf("=== Summary ===\n");
            printf("Total received: %d\n", self->total_received);
            printf("Deadline misses: %d\n", self->deadline_miss_count);
            exit(0);
        }
    =}

    deadline(timeout) {=
        (self->deadline_miss_count)++;
        (self->count)++;
        (self->total_received)++;

        long recv_time_ns = get_time_ns();
        long send_time_ns = x->value;
        long error_ns = recv_time_ns - send_time_ns;

        // Deadline miss時のlog
        printf("[%ld.%09ld] Destination receives msg, send_time: %ld ns, recv_time: %ld ns, error: %ld ns --Deadline misses--\n", 
            recv_time_ns / 1000000000L, recv_time_ns % 1000000000L,
            send_time_ns, recv_time_ns, error_ns);

        if (self->total_received >= self->max_count) {
            printf("=== Summary ===\n");
            printf("Total received: %d\n", self->total_received);
            printf("Deadline misses: %d\n", self->deadline_miss_count);
            exit(0);
        }
    =}
}

main reactor {
    s = new Source(period = 1 msec)
    d = new Destination(timeout = 300 usec, enable_heavy_loop = 0)  // Destinationはデフォルト軽い状態
    s.y -> d.x
}